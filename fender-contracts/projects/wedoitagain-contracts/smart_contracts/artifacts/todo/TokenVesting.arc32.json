{
    "hints": {
        "createVesting(byte[],uint64,uint64,uint64,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "claim()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "calculateVested()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getVestingInfo()(byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getUserVestingStatus()(uint64,uint64,uint64,bool,bool,uint64)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "revokeVesting()void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 2,
            "num_uints": 6
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "claimedTokens": {
                    "type": "uint64",
                    "key": "claimedTokens"
                },
                "cliffTime": {
                    "type": "uint64",
                    "key": "cliffTime"
                },
                "duration": {
                    "type": "uint64",
                    "key": "duration"
                },
                "employeeAddress": {
                    "type": "bytes",
                    "key": "employeeAddress"
                },
                "employerAddress": {
                    "type": "bytes",
                    "key": "employerAddress"
                },
                "startTime": {
                    "type": "uint64",
                    "key": "startTime"
                },
                "tokenASA": {
                    "type": "uint64",
                    "key": "tokenASA"
                },
                "totalTokens": {
                    "type": "uint64",
                    "key": "totalTokens"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "TokenVesting",
        "methods": [
            {
                "name": "createVesting",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "employeeAddr"
                    },
                    {
                        "type": "uint64",
                        "name": "token"
                    },
                    {
                        "type": "uint64",
                        "name": "total"
                    },
                    {
                        "type": "uint64",
                        "name": "start"
                    },
                    {
                        "type": "uint64",
                        "name": "cliff"
                    },
                    {
                        "type": "uint64",
                        "name": "vestingDuration"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "claim",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "calculateVested",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "getVestingInfo",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)"
                }
            },
            {
                "name": "getUserVestingStatus",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,uint64,bool,bool,uint64)"
                }
            },
            {
                "name": "revokeVesting",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}