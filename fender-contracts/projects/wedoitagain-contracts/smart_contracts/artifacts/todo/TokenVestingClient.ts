/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"TokenVesting","structs":{},"methods":[{"name":"createVesting","args":[{"type":"byte[]","name":"employeeAddr"},{"type":"uint64","name":"token"},{"type":"uint64","name":"total"},{"type":"uint64","name":"start"},{"type":"uint64","name":"cliff"},{"type":"uint64","name":"vestingDuration"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"claim","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"calculateVested","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getVestingInfo","args":[],"returns":{"type":"(byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getUserVestingStatus","args":[],"returns":{"type":"(uint64,uint64,uint64,bool,bool,uint64)"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"revokeVesting","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":6,"bytes":2},"local":{"ints":0,"bytes":0}},"keys":{"global":{"employerAddress":{"keyType":"AVMString","valueType":"AVMBytes","key":"ZW1wbG95ZXJBZGRyZXNz"},"employeeAddress":{"keyType":"AVMString","valueType":"AVMBytes","key":"ZW1wbG95ZWVBZGRyZXNz"},"tokenASA":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG9rZW5BU0E="},"totalTokens":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxUb2tlbnM="},"startTime":{"keyType":"AVMString","valueType":"AVMUint64","key":"c3RhcnRUaW1l"},"cliffTime":{"keyType":"AVMString","valueType":"AVMUint64","key":"Y2xpZmZUaW1l"},"duration":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZHVyYXRpb24="},"claimedTokens":{"keyType":"AVMString","valueType":"AVMUint64","key":"Y2xhaW1lZFRva2Vucw=="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[446],"errorMessage":"Cliff must be after or at start"},{"pc":[509],"errorMessage":"Cliff period not reached yet"},{"pc":[440],"errorMessage":"Duration must be greater than 0"},{"pc":[449],"errorMessage":"Invalid token ASA ID"},{"pc":[437],"errorMessage":"Must vest some tokens"},{"pc":[533],"errorMessage":"No tokens available to claim"},{"pc":[858],"errorMessage":"No unvested tokens to revoke"},{"pc":[168,180,245,350,368,380],"errorMessage":"OnCompletion is not NoOp"},{"pc":[434],"errorMessage":"Only creator can setup vesting"},{"pc":[497],"errorMessage":"Only employee can claim"},{"pc":[843],"errorMessage":"Only employer can revoke vesting"},{"pc":[423],"errorMessage":"can only call when creating"},{"pc":[171,183,248,353,371,383],"errorMessage":"can only call when not creating"},{"pc":[495,505,513,517,526,530,537,551,571,579,584,599,610,614,625,631,639,644,662,668,672,683,689,694,699,704,708,712,717,721,725,750,759,766,774,778,787,820,824,841,850,873],"errorMessage":"check GlobalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiADAAEEJgkJc3RhcnRUaW1lCGR1cmF0aW9uC3RvdGFsVG9rZW5zDWNsYWltZWRUb2tlbnMJY2xpZmZUaW1lD2VtcGxveWVlQWRkcmVzcwh0b2tlbkFTQQQVH3x1D2VtcGxveWVyQWRkcmVzczEbQQEtggYENe1fygTxV3cmBFyl/PcE+F0o9gRLsea8BGCE5SQ2GgCOBgDWAMoAuABPAA4AAiJDMRkURDEYRIgCkSNDMRkURDEYRIgCJE8FFk8FFk8FFoABACJPB1SAAQAiTwdUTwUWTwVPBVBPBFBPA1BPAiJTgcEBTFRMUCcHTFCwI0MxGRREMRhEiAGMSwkVFlcGAk8KUEsJFRZXBgJPClBPCRZPCRZPCRZPCRZPCRZPCRZPCRZPCRZLCRWBRAgWVwYCgAIARExQTwhQTwdQTwZQTwVQTwRQTwNQTwJQTFBPAlBMUCcHTFCwI0MxGRREMRhEiADoFicHTFCwI0MxGRREMRhEiABvI0MxGRREMRhENhoBVwIANhoCFzYaAxc2GgQXNhoFFzYaBheIAA0jQzEZQP7/MRgURCNDigYAMQAyCRJEi/xEi/9Ei/6L/Q9Ei/tEJwgyCWcnBYv6ZycGi/tnKov8ZyiL/WcnBIv+ZymL/2crImeJigAAMQAiJwVlRBJEMgdJIicEZURLAQ5EIihlRCIpZUQID0EALSIqZUQiK2VECUlEIitlREsBCCtMZ7ExACInBmVETwKyErIRshQkshAisgGziSIoZUSLAEwJIiplRAsiKWVECkL/wooAATIHSSInBGVEDEEAAyJMiSIoZUQiKWVECIsADkEABiIqZURMiSIoZUSLAEwJIiplRAsiKWVECkyJigAKMgeI/71JTgIiK2VECUwiKGVEIillRAgMQQAMIihlRQFEIillRQFEIicIZUQiJwVlRCInBmVEIiplRCIoZUQiJwRlRCIpZUQiK2VEiwCLAU8LTwuJigAGMgdJiP9lSU4CIitlRAlMMQAiJwVlRBJMIicEZURLAQ5MIihlRCIpZUQIDyIrZUxOAkRBABoiiwGLAosFiwOLBE8FTwtPC08LTwtPC08LiSIoZUQiKWVECIsACUL/2IoAADEAIicIZUQSRIj+/iIqZURLAQlJTgJJRCpPAmdBABexMgkiJwZlRIsAshKyEbIUJLIQIrIBs4k=","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the TokenVesting contract
 */
export type TokenVestingArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createVesting(byte[],uint64,uint64,uint64,uint64,uint64)void': {
      employeeAddr: Uint8Array
      token: bigint | number
      total: bigint | number
      start: bigint | number
      cliff: bigint | number
      vestingDuration: bigint | number
    }
    'claim()void': Record<string, never>
    'calculateVested()uint64': Record<string, never>
    'getVestingInfo()(byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)': Record<string, never>
    'getUserVestingStatus()(uint64,uint64,uint64,bool,bool,uint64)': Record<string, never>
    'revokeVesting()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createVesting(byte[],uint64,uint64,uint64,uint64,uint64)void': [employeeAddr: Uint8Array, token: bigint | number, total: bigint | number, start: bigint | number, cliff: bigint | number, vestingDuration: bigint | number]
    'claim()void': []
    'calculateVested()uint64': []
    'getVestingInfo()(byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)': []
    'getUserVestingStatus()(uint64,uint64,uint64,bool,bool,uint64)': []
    'revokeVesting()void': []
  }
}

/**
 * The return type for each method
 */
export type TokenVestingReturns = {
  'createVesting(byte[],uint64,uint64,uint64,uint64,uint64)void': void
  'claim()void': void
  'calculateVested()uint64': bigint
  'getVestingInfo()(byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)': [Uint8Array, Uint8Array, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint]
  'getUserVestingStatus()(uint64,uint64,uint64,bool,bool,uint64)': [bigint, bigint, bigint, boolean, boolean, bigint]
  'revokeVesting()void': void
}

/**
 * Defines the types of available calls and state of the TokenVesting smart contract.
 */
export type TokenVestingTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createVesting(byte[],uint64,uint64,uint64,uint64,uint64)void' | 'createVesting', {
      argsObj: TokenVestingArgs['obj']['createVesting(byte[],uint64,uint64,uint64,uint64,uint64)void']
      argsTuple: TokenVestingArgs['tuple']['createVesting(byte[],uint64,uint64,uint64,uint64,uint64)void']
      returns: TokenVestingReturns['createVesting(byte[],uint64,uint64,uint64,uint64,uint64)void']
    }>
    & Record<'claim()void' | 'claim', {
      argsObj: TokenVestingArgs['obj']['claim()void']
      argsTuple: TokenVestingArgs['tuple']['claim()void']
      returns: TokenVestingReturns['claim()void']
    }>
    & Record<'calculateVested()uint64' | 'calculateVested', {
      argsObj: TokenVestingArgs['obj']['calculateVested()uint64']
      argsTuple: TokenVestingArgs['tuple']['calculateVested()uint64']
      returns: TokenVestingReturns['calculateVested()uint64']
    }>
    & Record<'getVestingInfo()(byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)' | 'getVestingInfo', {
      argsObj: TokenVestingArgs['obj']['getVestingInfo()(byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
      argsTuple: TokenVestingArgs['tuple']['getVestingInfo()(byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
      returns: TokenVestingReturns['getVestingInfo()(byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
    }>
    & Record<'getUserVestingStatus()(uint64,uint64,uint64,bool,bool,uint64)' | 'getUserVestingStatus', {
      argsObj: TokenVestingArgs['obj']['getUserVestingStatus()(uint64,uint64,uint64,bool,bool,uint64)']
      argsTuple: TokenVestingArgs['tuple']['getUserVestingStatus()(uint64,uint64,uint64,bool,bool,uint64)']
      returns: TokenVestingReturns['getUserVestingStatus()(uint64,uint64,uint64,bool,bool,uint64)']
    }>
    & Record<'revokeVesting()void' | 'revokeVesting', {
      argsObj: TokenVestingArgs['obj']['revokeVesting()void']
      argsTuple: TokenVestingArgs['tuple']['revokeVesting()void']
      returns: TokenVestingReturns['revokeVesting()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        employerAddress: BinaryState
        employeeAddress: BinaryState
        tokenAsa: bigint
        totalTokens: bigint
        startTime: bigint
        cliffTime: bigint
        duration: bigint
        claimedTokens: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type TokenVestingSignatures = keyof TokenVestingTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type TokenVestingNonVoidMethodSignatures = keyof TokenVestingTypes['methods'] extends infer T ? T extends keyof TokenVestingTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the TokenVesting smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends TokenVestingSignatures> = TokenVestingTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the TokenVesting smart contract to the method's return type
 */
export type MethodReturn<TSignature extends TokenVestingSignatures> = TokenVestingTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = TokenVestingTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type TokenVestingCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type TokenVestingDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: TokenVestingCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the TokenVesting smart contract
 */
export abstract class TokenVestingParamsFactory {
  /**
   * Constructs a no op call for the createVesting(byte[],uint64,uint64,uint64,uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createVesting(params: CallParams<TokenVestingArgs['obj']['createVesting(byte[],uint64,uint64,uint64,uint64,uint64)void'] | TokenVestingArgs['tuple']['createVesting(byte[],uint64,uint64,uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createVesting(byte[],uint64,uint64,uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.employeeAddr, params.args.token, params.args.total, params.args.start, params.args.cliff, params.args.vestingDuration],
    }
  }
  /**
   * Constructs a no op call for the claim()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static claim(params: CallParams<TokenVestingArgs['obj']['claim()void'] | TokenVestingArgs['tuple']['claim()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'claim()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the calculateVested()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calculateVested(params: CallParams<TokenVestingArgs['obj']['calculateVested()uint64'] | TokenVestingArgs['tuple']['calculateVested()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calculateVested()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getVestingInfo()(byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getVestingInfo(params: CallParams<TokenVestingArgs['obj']['getVestingInfo()(byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | TokenVestingArgs['tuple']['getVestingInfo()(byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getVestingInfo()(byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getUserVestingStatus()(uint64,uint64,uint64,bool,bool,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getUserVestingStatus(params: CallParams<TokenVestingArgs['obj']['getUserVestingStatus()(uint64,uint64,uint64,bool,bool,uint64)'] | TokenVestingArgs['tuple']['getUserVestingStatus()(uint64,uint64,uint64,bool,bool,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getUserVestingStatus()(uint64,uint64,uint64,bool,bool,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the revokeVesting()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static revokeVesting(params: CallParams<TokenVestingArgs['obj']['revokeVesting()void'] | TokenVestingArgs['tuple']['revokeVesting()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'revokeVesting()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the TokenVesting smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class TokenVestingFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `TokenVestingFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new TokenVestingClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new TokenVestingClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the TokenVesting smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: TokenVestingDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new TokenVestingClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TokenVesting smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TokenVesting smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TokenVesting smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new TokenVestingClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the TokenVesting smart contract
 */
export class TokenVestingClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `TokenVestingClient`
   *
   * @param appClient An `AppClient` instance which has been created with the TokenVesting app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `TokenVestingClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends TokenVestingNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `TokenVestingClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<TokenVestingClient> {
    return new TokenVestingClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `TokenVestingClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<TokenVestingClient> {
    return new TokenVestingClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the TokenVesting smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the TokenVesting smart contract using the `createVesting(byte[],uint64,uint64,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createVesting: (params: CallParams<TokenVestingArgs['obj']['createVesting(byte[],uint64,uint64,uint64,uint64,uint64)void'] | TokenVestingArgs['tuple']['createVesting(byte[],uint64,uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TokenVestingParamsFactory.createVesting(params))
    },

    /**
     * Makes a call to the TokenVesting smart contract using the `claim()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    claim: (params: CallParams<TokenVestingArgs['obj']['claim()void'] | TokenVestingArgs['tuple']['claim()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(TokenVestingParamsFactory.claim(params))
    },

    /**
     * Makes a call to the TokenVesting smart contract using the `calculateVested()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    calculateVested: (params: CallParams<TokenVestingArgs['obj']['calculateVested()uint64'] | TokenVestingArgs['tuple']['calculateVested()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(TokenVestingParamsFactory.calculateVested(params))
    },

    /**
     * Makes a call to the TokenVesting smart contract using the `getVestingInfo()(byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getVestingInfo: (params: CallParams<TokenVestingArgs['obj']['getVestingInfo()(byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | TokenVestingArgs['tuple']['getVestingInfo()(byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(TokenVestingParamsFactory.getVestingInfo(params))
    },

    /**
     * Makes a call to the TokenVesting smart contract using the `getUserVestingStatus()(uint64,uint64,uint64,bool,bool,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getUserVestingStatus: (params: CallParams<TokenVestingArgs['obj']['getUserVestingStatus()(uint64,uint64,uint64,bool,bool,uint64)'] | TokenVestingArgs['tuple']['getUserVestingStatus()(uint64,uint64,uint64,bool,bool,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(TokenVestingParamsFactory.getUserVestingStatus(params))
    },

    /**
     * Makes a call to the TokenVesting smart contract using the `revokeVesting()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    revokeVesting: (params: CallParams<TokenVestingArgs['obj']['revokeVesting()void'] | TokenVestingArgs['tuple']['revokeVesting()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(TokenVestingParamsFactory.revokeVesting(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the TokenVesting smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the TokenVesting smart contract using the `createVesting(byte[],uint64,uint64,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createVesting: (params: CallParams<TokenVestingArgs['obj']['createVesting(byte[],uint64,uint64,uint64,uint64,uint64)void'] | TokenVestingArgs['tuple']['createVesting(byte[],uint64,uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TokenVestingParamsFactory.createVesting(params))
    },

    /**
     * Makes a call to the TokenVesting smart contract using the `claim()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    claim: (params: CallParams<TokenVestingArgs['obj']['claim()void'] | TokenVestingArgs['tuple']['claim()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(TokenVestingParamsFactory.claim(params))
    },

    /**
     * Makes a call to the TokenVesting smart contract using the `calculateVested()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    calculateVested: (params: CallParams<TokenVestingArgs['obj']['calculateVested()uint64'] | TokenVestingArgs['tuple']['calculateVested()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(TokenVestingParamsFactory.calculateVested(params))
    },

    /**
     * Makes a call to the TokenVesting smart contract using the `getVestingInfo()(byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getVestingInfo: (params: CallParams<TokenVestingArgs['obj']['getVestingInfo()(byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | TokenVestingArgs['tuple']['getVestingInfo()(byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(TokenVestingParamsFactory.getVestingInfo(params))
    },

    /**
     * Makes a call to the TokenVesting smart contract using the `getUserVestingStatus()(uint64,uint64,uint64,bool,bool,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getUserVestingStatus: (params: CallParams<TokenVestingArgs['obj']['getUserVestingStatus()(uint64,uint64,uint64,bool,bool,uint64)'] | TokenVestingArgs['tuple']['getUserVestingStatus()(uint64,uint64,uint64,bool,bool,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(TokenVestingParamsFactory.getUserVestingStatus(params))
    },

    /**
     * Makes a call to the TokenVesting smart contract using the `revokeVesting()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    revokeVesting: (params: CallParams<TokenVestingArgs['obj']['revokeVesting()void'] | TokenVestingArgs['tuple']['revokeVesting()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(TokenVestingParamsFactory.revokeVesting(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the TokenVesting smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the TokenVesting smart contract using the `createVesting(byte[],uint64,uint64,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createVesting: async (params: CallParams<TokenVestingArgs['obj']['createVesting(byte[],uint64,uint64,uint64,uint64,uint64)void'] | TokenVestingArgs['tuple']['createVesting(byte[],uint64,uint64,uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TokenVestingParamsFactory.createVesting(params))
      return {...result, return: result.return as unknown as (undefined | TokenVestingReturns['createVesting(byte[],uint64,uint64,uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the TokenVesting smart contract using the `claim()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    claim: async (params: CallParams<TokenVestingArgs['obj']['claim()void'] | TokenVestingArgs['tuple']['claim()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(TokenVestingParamsFactory.claim(params))
      return {...result, return: result.return as unknown as (undefined | TokenVestingReturns['claim()void'])}
    },

    /**
     * Makes a call to the TokenVesting smart contract using the `calculateVested()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    calculateVested: async (params: CallParams<TokenVestingArgs['obj']['calculateVested()uint64'] | TokenVestingArgs['tuple']['calculateVested()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(TokenVestingParamsFactory.calculateVested(params))
      return {...result, return: result.return as unknown as (undefined | TokenVestingReturns['calculateVested()uint64'])}
    },

    /**
     * Makes a call to the TokenVesting smart contract using the `getVestingInfo()(byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getVestingInfo: async (params: CallParams<TokenVestingArgs['obj']['getVestingInfo()(byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | TokenVestingArgs['tuple']['getVestingInfo()(byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(TokenVestingParamsFactory.getVestingInfo(params))
      return {...result, return: result.return as unknown as (undefined | TokenVestingReturns['getVestingInfo()(byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the TokenVesting smart contract using the `getUserVestingStatus()(uint64,uint64,uint64,bool,bool,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getUserVestingStatus: async (params: CallParams<TokenVestingArgs['obj']['getUserVestingStatus()(uint64,uint64,uint64,bool,bool,uint64)'] | TokenVestingArgs['tuple']['getUserVestingStatus()(uint64,uint64,uint64,bool,bool,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(TokenVestingParamsFactory.getUserVestingStatus(params))
      return {...result, return: result.return as unknown as (undefined | TokenVestingReturns['getUserVestingStatus()(uint64,uint64,uint64,bool,bool,uint64)'])}
    },

    /**
     * Makes a call to the TokenVesting smart contract using the `revokeVesting()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    revokeVesting: async (params: CallParams<TokenVestingArgs['obj']['revokeVesting()void'] | TokenVestingArgs['tuple']['revokeVesting()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(TokenVestingParamsFactory.revokeVesting(params))
      return {...result, return: result.return as unknown as (undefined | TokenVestingReturns['revokeVesting()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new TokenVestingClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current TokenVesting app
   */
  state = {
    /**
     * Methods to access global state for the current TokenVesting app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          employerAddress: new BinaryStateValue(result.employerAddress),
          employeeAddress: new BinaryStateValue(result.employeeAddress),
          tokenAsa: result.tokenASA,
          totalTokens: result.totalTokens,
          startTime: result.startTime,
          cliffTime: result.cliffTime,
          duration: result.duration,
          claimedTokens: result.claimedTokens,
        }
      },
      /**
       * Get the current value of the employerAddress key in global state
       */
      employerAddress: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("employerAddress")) as Uint8Array | undefined) },
      /**
       * Get the current value of the employeeAddress key in global state
       */
      employeeAddress: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("employeeAddress")) as Uint8Array | undefined) },
      /**
       * Get the current value of the tokenASA key in global state
       */
      tokenAsa: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("tokenASA")) as bigint | undefined },
      /**
       * Get the current value of the totalTokens key in global state
       */
      totalTokens: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalTokens")) as bigint | undefined },
      /**
       * Get the current value of the startTime key in global state
       */
      startTime: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("startTime")) as bigint | undefined },
      /**
       * Get the current value of the cliffTime key in global state
       */
      cliffTime: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("cliffTime")) as bigint | undefined },
      /**
       * Get the current value of the duration key in global state
       */
      duration: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("duration")) as bigint | undefined },
      /**
       * Get the current value of the claimedTokens key in global state
       */
      claimedTokens: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("claimedTokens")) as bigint | undefined },
    },
  }

  public newGroup(): TokenVestingComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createVesting(byte[],uint64,uint64,uint64,uint64,uint64)void method call against the TokenVesting contract
       */
      createVesting(params: CallParams<TokenVestingArgs['obj']['createVesting(byte[],uint64,uint64,uint64,uint64,uint64)void'] | TokenVestingArgs['tuple']['createVesting(byte[],uint64,uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createVesting(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a claim()void method call against the TokenVesting contract
       */
      claim(params: CallParams<TokenVestingArgs['obj']['claim()void'] | TokenVestingArgs['tuple']['claim()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.claim(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a calculateVested()uint64 method call against the TokenVesting contract
       */
      calculateVested(params: CallParams<TokenVestingArgs['obj']['calculateVested()uint64'] | TokenVestingArgs['tuple']['calculateVested()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.calculateVested(params)))
        resultMappers.push((v) => client.decodeReturnValue('calculateVested()uint64', v))
        return this
      },
      /**
       * Add a getVestingInfo()(byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) method call against the TokenVesting contract
       */
      getVestingInfo(params: CallParams<TokenVestingArgs['obj']['getVestingInfo()(byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | TokenVestingArgs['tuple']['getVestingInfo()(byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getVestingInfo(params)))
        resultMappers.push((v) => client.decodeReturnValue('getVestingInfo()(byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a getUserVestingStatus()(uint64,uint64,uint64,bool,bool,uint64) method call against the TokenVesting contract
       */
      getUserVestingStatus(params: CallParams<TokenVestingArgs['obj']['getUserVestingStatus()(uint64,uint64,uint64,bool,bool,uint64)'] | TokenVestingArgs['tuple']['getUserVestingStatus()(uint64,uint64,uint64,bool,bool,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getUserVestingStatus(params)))
        resultMappers.push((v) => client.decodeReturnValue('getUserVestingStatus()(uint64,uint64,uint64,bool,bool,uint64)', v))
        return this
      },
      /**
       * Add a revokeVesting()void method call against the TokenVesting contract
       */
      revokeVesting(params: CallParams<TokenVestingArgs['obj']['revokeVesting()void'] | TokenVestingArgs['tuple']['revokeVesting()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.revokeVesting(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the TokenVesting contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as TokenVestingComposer
  }
}
export type TokenVestingComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createVesting(byte[],uint64,uint64,uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createVesting(params?: CallParams<TokenVestingArgs['obj']['createVesting(byte[],uint64,uint64,uint64,uint64,uint64)void'] | TokenVestingArgs['tuple']['createVesting(byte[],uint64,uint64,uint64,uint64,uint64)void']>): TokenVestingComposer<[...TReturns, TokenVestingReturns['createVesting(byte[],uint64,uint64,uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the claim()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claim(params?: CallParams<TokenVestingArgs['obj']['claim()void'] | TokenVestingArgs['tuple']['claim()void']>): TokenVestingComposer<[...TReturns, TokenVestingReturns['claim()void'] | undefined]>

  /**
   * Calls the calculateVested()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateVested(params?: CallParams<TokenVestingArgs['obj']['calculateVested()uint64'] | TokenVestingArgs['tuple']['calculateVested()uint64']>): TokenVestingComposer<[...TReturns, TokenVestingReturns['calculateVested()uint64'] | undefined]>

  /**
   * Calls the getVestingInfo()(byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getVestingInfo(params?: CallParams<TokenVestingArgs['obj']['getVestingInfo()(byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | TokenVestingArgs['tuple']['getVestingInfo()(byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']>): TokenVestingComposer<[...TReturns, TokenVestingReturns['getVestingInfo()(byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the getUserVestingStatus()(uint64,uint64,uint64,bool,bool,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getUserVestingStatus(params?: CallParams<TokenVestingArgs['obj']['getUserVestingStatus()(uint64,uint64,uint64,bool,bool,uint64)'] | TokenVestingArgs['tuple']['getUserVestingStatus()(uint64,uint64,uint64,bool,bool,uint64)']>): TokenVestingComposer<[...TReturns, TokenVestingReturns['getUserVestingStatus()(uint64,uint64,uint64,bool,bool,uint64)'] | undefined]>

  /**
   * Calls the revokeVesting()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  revokeVesting(params?: CallParams<TokenVestingArgs['obj']['revokeVesting()void'] | TokenVestingArgs['tuple']['revokeVesting()void']>): TokenVestingComposer<[...TReturns, TokenVestingReturns['revokeVesting()void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the TokenVesting smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): TokenVestingComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): TokenVestingComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<TokenVestingComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<TokenVestingComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<TokenVestingComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<TokenVestingComposerResults<TReturns>>
}
export type TokenVestingComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

